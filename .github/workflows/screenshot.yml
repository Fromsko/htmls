name: Playwright Screenshot Update

# 触发条件
on:
  workflow_dispatch:
  schedule:
    - cron: "0 8 * * 1"
  push:
    branches:
      - main
    paths:
      - "index.html"
      - "chat.html"
      - "service-worker.js"
      - "tests/**"
      - "package.json"
      - "bun.lock"

# 并发控制
concurrency:
  group: screenshot-update
  cancel-in-progress: true

env:
  BUN_INSTALL_CACHE: 1

jobs:
  screenshot:
    name: Capture Screenshots with Playwright
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      # 步骤 1: 检出代码（禁用 git 缓存，确保获取最新代码）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录
          clean: true     # 确保工作目录干净

      # 验证检出的代码
      - name: Verify checkout
        run: |
          echo "📋 当前提交: $(git rev-parse HEAD)"
          echo "📋 当前分支: $(git rev-parse --abbrev-ref HEAD)"
          echo "📋 最后提交信息: $(git log -1 --pretty=%B)"
          echo "📋 index.html 最后修改: $(git log -1 --format=%ai -- index.html)"

      # 步骤 2: 设置 Bun (v2 - 最新版本)
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # 步骤 3: Bun 依赖缓存（优化缓存策略）
      - name: Restore Bun Dependencies Cache
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # 步骤 4: 安装依赖（移除 --frozen-lockfile，使用缓存加速）
      - name: Install dependencies
        run: bun install
        # 注意：移除 --frozen-lockfile 的原因：
        # 1. 缓存已保证快速安装
        # 2. bun.lock 在本地已是最新状态
        # 3. CI 环境中不需要严格验证锁定状态
        # 4. 避免 Bun 版本升级导致的 lock 格式变化问题

      # 步骤 5: Playwright 浏览器缓存
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.bun
          key: ${{ runner.os }}-playwright-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 步骤 6: 安装 Playwright 浏览器
      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium

      # 步骤 7: 运行测试
      - name: Run Playwright tests
        run: bun test
        timeout-minutes: 15

      # 步骤 8: 更新 README
      - name: Update README with screenshots
        run: bun scripts/update-readme.js

      # 步骤 9: 自动更新时间戳
      - name: Update timestamp
        run: bun scripts/update-timestamp.js

      # 步骤 10: 检查变更
      - name: Check for changes
        id: git-check
        run: |
          if git diff --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "📝 检测到文件变更:"
            git diff --name-only
          fi

      # 步骤 11: 配置 Git
      - name: Configure Git
        if: steps.git-check.outputs.no_changes == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # 步骤 12: 提交和推送
      - name: Commit and push
        if: steps.git-check.outputs.no_changes == 'false'
        run: |
          git add -A
          git commit -m "chore: 自动更新截图和时间戳 [skip ci]"
          git push origin main

      # 步骤 13: 上传测试报告
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: ignore

      # 步骤 14: 上传截图
      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: screenshots/
          retention-days: 30
          if-no-files-found: ignore

      # 步骤 15: 生成摘要
      - name: Generate workflow summary
        if: always()
        run: |
          echo "## 📸 Playwright Screenshot Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 详情 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 包管理器 | Bun (latest) |" >> $GITHUB_STEP_SUMMARY
          echo "| Action 版本 | oven-sh/setup-bun@v2 |" >> $GITHUB_STEP_SUMMARY
          echo "| 锁定文件 | bun.lock |" >> $GITHUB_STEP_SUMMARY
          echo "| 缓存策略 | 智能缓存（依赖 + 浏览器）|" >> $GITHUB_STEP_SUMMARY
          echo "| 浏览器 | Chromium |" >> $GITHUB_STEP_SUMMARY
          echo "| 自动化 | 格式化 + 时间戳 + 截图 |" >> $GITHUB_STEP_SUMMARY
